// // date======================================================================
// const hour = document.querySelector(".hour");

// const minute = document.querySelector(".minute");
// const second = document.querySelector(".second");

// function currentTime() {
//   let date = new Date();
//   hour.innerHTML =
//     date.getHours() >= 10 ? date.getHours() : "0" + date.getHours();
//   minute.innerHTML =
//     date.getMinutes() >= 10 ? date.getMinutes() : "0" + date.getMinutes();
//   second.innerHTML =
//     date.getSeconds() >= 10 ? date.getSeconds() : "0" + date.getSeconds();
// }
// setInterval(currentTime, 1000);

// console.log(currentTime());

// console.log(date.getDate());

// console.log(date.getHours());

// console.log(date.getFullYear());

// console.log(date.getDay());
// console.log(date.getMilliseconds());

// console.log(date.getTime());
// // spread====================================================================================

// // let arr = [1, 2, 3];

// // console.log(...arr);

// // function add(a, b, c) {
// //   return a + b + c;

// // }
// // console.log(add(...arr));
// // rest==============================================================================
// // let obj = {

// //   name: "izzatillo",

// //   surname: "akbarov",

// // };
// // let obj2 = { ...obj, age: 18, height:175, };

// // console.log(obj2);
// // function add(a, b, c, ...rest) {
// //   return a + b + c + rest.reduce((acc, value) => (acc += value), 0);
// // }

// // console.log(add(...[1, 2, 3, 4, 5, 6, 7, 8]));

// // destruction==========================================
// // let { x, y, z } = {
// //   x: 1,
// //   y: 2,
// //   z: 3,
// // };
// // console.log(x, z);
// // let [name, surname, fathersname] = ["izzatjon", "akbarov", "isroiljon ugli"];
// // console.log(name, surname, fathersname);

// let person = {
//   name: "izzatjon",
//   surname: "akbarov",
//   age: 22,
//   ismarried: true,
//   location: {
//     city: "toshkent",
//   },
// };

// // shallow copy========================================
// let person2 = JSON.parse(JSON.stringify(person));
// // this is used for deep copying
// console.log(person2);

// person2.name = "muhammadjon";
// console.log(person);
// console.log(person2);
//








txt about lesson




debugging 
error
strict mode
runtime
this keyword
references




debugging
console obj log and table ekranga chiqaradi va table tartibli qilib chiqaradi 
debugger kodni muayyan nuqtada toxtatib xatosi bor yoki yoqligini tekshirish uchun ishlatiladi
 brakpoints sourcedanqoyiladi kodni malm bir qismini ishlatish uchun nuqta bu dev toolsdakod chap tomoniga bosib brakpoints qoyiladi

rubber duck debugging bu oziga ozi tushuntirib xatosini topish



error


types 7 
range kopincha xato qiymatlar yoki uzunliklar berilganda yuzaga keladi masalan 100/0 errorgacha oqiydi
reference  ketmaketlikda xatolik hoisting tdz ozidan oldin chaqirishga urunish
syntax yozishda xatolik  umuman ishlamaydi
type  bowqa  type metodini boshqa turga    ishlatganda  yuzaga keladi errorgacha oqishydi 

try catch bloks trykodda xatolikbolmasa ishlaydi catch esa hatolik bolganda shunchaki str formatga aylantiradi  
finally kodd error bolsa ham bolmasa ham ishlayveradi
strict mode qatiy rejim ozgaruvchilarni eon qilmasdan turib qiymat berishni taqiqlaydifunctionda berilsa faqat funksiya ichida ishlaydi 












this  global === window nodejsda =={}
functisyada this ===window
use strict bolganda this === undefined
object da this ==obj ozidagi malumotlarni 
arrow function da ==== this ga ega emas va windowg  chiqiadi
engine javascript engine bu kodni tahlil qilish  va mashina tiliga ogirish uchun ishlatiladi boshqa muhit va browserlarda ishlashi uchun kod ishlashi va tarjima qilinish bian shugullanadi
v8 engine       nodejs chrome 
spider money   mozilla firefox
javascriptcore applewebkit
chakra     microsoft edge da ishlaydi
execution context 
global 
execution phase creation phase 
creation phase uzgaruvchilarni undefined uninitialized qiladi 
execution phase qiymat beradi  

function execution context
execution phase creation phase 
creation phase uzgaruvchilarni undefined uninitialized qiladi 
execution phase qiymat beradi  
callstack funksiya chaqirilgan da uni bajarillishi haqida malumot saqlovchi tuzilma  lifo boyicha ishlaydi 
3ta bosqich funksiya chaqirish bajarish callstackda nchiqarish 
